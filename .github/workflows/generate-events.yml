name: Generate Events JSON

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    paths:
      - '_events/**'

jobs:
  generate-events:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install gray-matter
      
      - name: Generate events.json
        run: |
          # Script pour générer events.json à partir des fichiers Markdown
          node -e "
          const fs = require('fs');
          const path = require('path');
          const matter = require('gray-matter');
          
          // Lire tous les fichiers du dossier _events
          const eventsDir = path.join(process.cwd(), '_events');
          const files = fs.readdirSync(eventsDir);
          
          console.log('Fichiers trouvés:', files);
          
          // Traiter chaque fichier Markdown
          const events = files
            .filter(filename => filename.endsWith('.md'))
            .map(filename => {
              const filePath = path.join(eventsDir, filename);
              const fileContent = fs.readFileSync(filePath, 'utf8');
              const { data } = matter(fileContent);
              
              return {
                title: data.title || 'Sans titre',
                date: data.date || 'À venir',
                description: data.description || '',
                image: data.image || null,
                link: data.link || '#contact',
                linkText: data.linkText || \"Plus d'informations\",
                order: data.order || 999
              };
            });
          
          // Trier les événements par ordre
          events.sort((a, b) => a.order - b.order);
          
          // Créer le répertoire api s'il n'existe pas
          const apiDir = path.join(process.cwd(), 'api');
          if (!fs.existsSync(apiDir)) {
            fs.mkdirSync(apiDir, { recursive: true });
          }
          
          // Écrire le fichier JSON
          fs.writeFileSync(
            path.join(apiDir, 'events.json'),
            JSON.stringify(events, null, 2)
          );
          
          // Créer le fichier refresh.js avec un timestamp
          const timestamp = Date.now();
          fs.writeFileSync(
            path.join(process.cwd(), 'refresh.js'),
            \`// Timestamp: \${timestamp}
// Ce fichier est généré automatiquement pour forcer le rechargement des événements
console.log(\"Événements mis à jour le \${new Date().toLocaleString()}\");\`
          );
          
          console.log('Fichiers events.json et refresh.js générés avec succès');
          "
      
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add api/events.json refresh.js
          git diff --quiet && git diff --staged --quiet || git commit -m "Update events.json et refresh.js automatiquement"
          git push 